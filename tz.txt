Написать программу, которая будет принимать адрес BTC как входной параметр, получать его utxo и формировать из них оптимальную транзакцию.

Под оптимальной транзакцией теперь подразумевается транзакция с минимальным набор инпутов, сумма которых больше или равна искомой. Плюс транзакция имеет fee, который зависит от ее размера. Каждый инпут увеличивает размер транзакции, что увеличивает fee. Цену за fee тоже нужно учитвать. Если находится несколько вариантов, выбрать нужно тот где сумма получается меньше.

Цена за 1 байт транзакции - 17 сатоши, транзакция с 1 входом и 1 выходом занимает 225 байт, каждый последующий инпут занимает 147 байт.

Обязательно нужно брать utxo из блокчейна, на вход подаётся только адрес BTC (адрес берётся из query запроса)!!!

Пример оптимальной транзакции:
Utxo: [0.1, 1, 0.4, 0.5]
Нужно отправить 0.5
Правильное utxo [1], так как нужно учитывать ещё fee, который берут за каждую транзакцию.

Пример оптимальной транзакции2:
Utxo: [0.1, 0.3, 0.2, 0.03, 0.04, 0.4, 0.5]
Нужно отправить 0.25
Правильное utxo для этой транзакции: [0.3]

Пример оптимальной транзакции3:
Utxo: [0.03, 0.04, 0.1, 0.2, 0.3, 0.4, 0.5]
Нужно отправить 0.55
Правильное utxo для этой транзакции: [0.5, 0.1]

Покрыть это всё юнит тестами
Реализовать на фреймворке: nest.js (обязательно архитектура Model-Controller-Service)

Вся логика должна быть в сервисе, в контроллере валидация входных параметров и вызов метода сервиса, в модуле логики быть не должно.

Тесты через jest